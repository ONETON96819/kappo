// koffee 1.14.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var BrowserWindow, Menu, Tray, about, activateApp, activeApp, activeWin, allKeys, app, appName, apps, args, childp, clipboard, createWindow, electron, findApps, fs, getActiveApp, iconDir, klog, onWinResize, os, osascript, pkg, post, prefs, ref, reloadWindow, saveBounds, scripts, showAbout, slash, squareTimer, srcmap, toggleWindow, tray, valid, win;

ref = require('kxk'), about = ref.about, app = ref.app, args = ref.args, childp = ref.childp, fs = ref.fs, klog = ref.klog, os = ref.os, osascript = ref.osascript, post = ref.post, prefs = ref.prefs, slash = ref.slash, srcmap = ref.srcmap, valid = ref.valid, win = ref.win;

pkg = require('../package.json');

electron = require('electron');

app = electron.app;

BrowserWindow = electron.BrowserWindow;

Tray = electron.Tray;

Menu = electron.Menu;

clipboard = electron.clipboard;

iconDir = slash.resolve((app.getPath('userData')) + "/icons");

win = null;

tray = null;

apps = {};

scripts = {};

allKeys = [];

process.on('uncaughtException', function(err) {
    srcmap.logErr(err, 'ðŸ”»');
    return true;
});

klog.slog.icon = slash.fileUrl(slash.resolve(slash.join(__dirname, '..', 'img', 'menu@2x.png')));

app.setName(pkg.productName);

args = args.init("verbose     log verbose     false\ndebug       log debug       false  -D");

post.on('winlog', function(text) {
    return console.log(">>> " + text);
});

post.on('runScript', function(name) {
    return scripts[name].cb();
});

post.on('hideWin', function() {
    return win != null ? win.hide() : void 0;
});

post.on('cancel', function() {
    return activateApp();
});

post.on('about', function() {
    return showAbout();
});

post.on('findApps', function() {
    return findApps();
});

post.on('devTools', function() {
    return win != null ? win.webContents.openDevTools({
        mode: 'detach'
    }) : void 0;
});

post.onGet('apps', function() {
    return {
        apps: apps,
        scripts: scripts,
        allKeys: allKeys
    };
});

electron.ipcMain.on('getWinBounds', function(e) {
    return e.returnValue = win != null ? win.getBounds() : void 0;
});

electron.ipcMain.on('getScreenSize', function(e) {
    return e.returnValue = electron.screen.getPrimaryDisplay().workAreaSize;
});

electron.ipcMain.on('setWinBounds', function(e, b) {
    klog('setWinBounds', win != null, b);
    return win != null ? win.setBounds(b) : void 0;
});

findApps = function() {
    var appFind, exeFind, sortKeys;
    sortKeys = function() {
        var hideWin;
        allKeys = Object.keys(apps).concat(Object.keys(scripts));
        allKeys.sort(function(a, b) {
            return a.toLowerCase().localeCompare(b.toLowerCase());
        });
        if (win) {
            return post.toWins('appsFound');
        } else {
            createWindow();
            hideWin = function() {
                return win != null ? win.hide() : void 0;
            };
            if (!args.debug) {
                return setTimeout(hideWin, 1000);
            }
        }
    };
    if (slash.win()) {
        exeFind = require('./exefind');
        return exeFind(function(exes) {
            if (valid(exes)) {
                apps = exes;
                return sortKeys();
            }
        });
    } else {
        appFind = require('./appfind');
        return appFind(function(appl) {
            apps = appl;
            return sortKeys();
        });
    }
};

appName = null;

activeApp = null;

activeWin = null;

getActiveApp = function() {
    var top, wxw;
    if (slash.win()) {
        wxw = require('wxw');
        top = wxw('info', 'top')[0];
        if ((top != null ? top.path : void 0) != null) {
            appName = activeApp = slash.base(top.path);
        }
    } else {
        activeApp = childp.execSync(__dirname + "/../bin/appswitch -P", {
            encoding: 'utf8'
        });
    }
    klog('getActiveApp appName', appName, '-> activeApp', activeApp);
    if (win != null) {
        if (appName != null) {
            klog('getActiveApp post.currentApp', appName);
            post.toWins('currentApp', appName);
        } else {
            klog('getActiveApp clearSearch', appName);
            post.toWins('clearSearch');
        }
        return post.toWins('fade');
    } else {
        return createWindow();
    }
};

activateApp = function() {
    var info, wxw;
    if (slash.win()) {
        if (activeWin) {
            wxw = require('wxw');
            info = wxw('info', activeWin)[0];
            if (info != null ? info.path : void 0) {
                klog('activate', info.path);
                wxw('launch', info.path);
            }
        }
        return win != null ? win.hide() : void 0;
    } else {
        if (activeApp == null) {
            return win != null ? win.hide() : void 0;
        } else {
            return childp.exec(__dirname + "/../bin/appswitch -fp " + activeApp, function(err) {
                return win != null ? win.hide() : void 0;
            });
        }
    }
};

toggleWindow = function() {
    if (win != null ? win.isVisible() : void 0) {
        if (prefs.get('hideOnDoubleActivation', false)) {
            return win.hide();
        } else {
            return post.toWins('openCurrent');
        }
    } else {
        if (slash.win()) {
            if (win == null) {
                return createWindow();
            } else {
                getActiveApp();
                return win.focus();
            }
        } else {
            osascript = require('osascript')["eval"];
            return osascript("tell application \"System Events\"\n    set n to name of first application process whose frontmost is true\nend tell\ndo shell script \"echo \" & n", {
                type: 'AppleScript'
            }, function(err, name) {
                appName = String(name).trim();
                klog('toggleWindow appName', appName);
                if (win == null) {
                    return createWindow();
                } else {
                    getActiveApp();
                    win.show();
                    return win.focus();
                }
            });
        }
    }
};

reloadWindow = function() {
    return win.webContents.reloadIgnoringCache();
};

createWindow = function() {
    var bounds;
    if (win != null) {
        return;
    }
    win = new BrowserWindow({
        width: 300,
        height: 300,
        center: true,
        alwaysOnTop: true,
        movable: true,
        resizable: true,
        transparent: true,
        frame: false,
        maximizable: false,
        minimizable: false,
        minWidth: 200,
        minHeight: 200,
        maxWidth: 600,
        maxHeight: 600,
        fullscreen: false,
        show: false,
        webPreferences: {
            webSecurity: false,
            contextIsolation: false,
            nodeIntegration: true,
            nodeIntegrationInWorker: true
        }
    });
    bounds = prefs.get('bounds');
    if (bounds != null) {
        win.setBounds(bounds);
    }
    win.loadURL("file://" + __dirname + "/index.html");
    win.on('resize', onWinResize);
    win.on('move', saveBounds);
    win.on('ready-to-show', function() {
        getActiveApp();
        if (args.debug) {
            win.webContents.openDevTools({
                mode: 'detach'
            });
        }
        win.show();
        return win.focus();
    });
    return win;
};

saveBounds = function() {
    if (win != null) {
        return prefs.set('bounds', win.getBounds());
    }
};

squareTimer = null;

onWinResize = function(event) {
    var adjustSize;
    clearTimeout(squareTimer);
    adjustSize = function() {
        var b;
        b = win.getBounds();
        if (b.width !== b.height) {
            b.width = b.height = Math.min(b.width, b.height);
            win.setBounds(b);
        }
        return saveBounds();
    };
    return squareTimer = setTimeout(adjustSize, 300);
};

showAbout = function() {
    var color, highl, textc;
    if (prefs.get('scheme', 'dark') === 'bright') {
        color = '#fff';
        textc = '#ddd';
        highl = '#000';
    } else {
        textc = '#444';
        highl = '#fff';
        color = '#111';
    }
    return about({
        img: __dirname + "/../img/about.png",
        color: textc,
        highlight: highl,
        background: color,
        size: 200,
        pkg: pkg
    });
};

app.on('window-all-closed', function(event) {
    return event.preventDefault();
});

app.on('ready', function() {
    var ref1, scr;
    if (app.requestSingleInstanceLock != null) {
        if (app.requestSingleInstanceLock()) {
            app.on('second-instance', toggleWindow);
        } else {
            app.exit(0);
        }
    }
    tray = new Tray(__dirname + "/../img/menu.png");
    tray.on('click', toggleWindow);
    if (os.platform() !== 'darwin') {
        tray.setContextMenu(Menu.buildFromTemplate([
            {
                label: "Quit",
                click: function() {
                    app.exit(0);
                    return process.exit(0);
                }
            }, {
                label: "About",
                click: showAbout
            }, {
                label: "Activate",
                click: toggleWindow
            }
        ]));
    }
    if ((ref1 = app.dock) != null) {
        ref1.hide();
    }
    Menu.setApplicationMenu(Menu.buildFromTemplate([
        {
            label: app.getName(),
            submenu: [
                {
                    label: "About " + pkg.name,
                    accelerator: 'CmdOrCtrl+.',
                    click: function() {
                        return showAbout();
                    }
                }, {
                    type: 'separator'
                }, {
                    label: 'Quit',
                    accelerator: 'CmdOrCtrl+Q',
                    click: function() {
                        saveBounds();
                        app.exit(0);
                        return process.exit(0);
                    }
                }
            ]
        }, {
            label: 'Window',
            submenu: [
                {
                    label: 'Close Window',
                    accelerator: 'CmdOrCtrl+W',
                    click: function() {
                        return win != null ? win.close() : void 0;
                    }
                }, {
                    type: 'separator'
                }, {
                    label: 'Reload Window',
                    accelerator: 'CmdOrCtrl+Alt+L',
                    click: function() {
                        return reloadWindow();
                    }
                }, {
                    label: 'Toggle DevTools',
                    accelerator: 'CmdOrCtrl+Alt+I',
                    click: function() {
                        return win != null ? win.webContents.openDevTools() : void 0;
                    }
                }
            ]
        }
    ]));
    prefs.init({
        defaults: {
            shortcut: 'F1'
        }
    });
    electron.globalShortcut.register(prefs.get('shortcut'), toggleWindow);
    fs.ensureDirSync(iconDir);
    scr = require('./scripts');
    if (slash.win()) {
        scripts = scr.winScripts();
    } else {
        scripts = scr.macScripts();
    }
    return findApps();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuLi9jb2ZmZWUiLCJzb3VyY2VzIjpbIm1haW4uY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQWdHLE9BQUEsQ0FBUSxLQUFSLENBQWhHLEVBQUUsaUJBQUYsRUFBUyxhQUFULEVBQWMsZUFBZCxFQUFvQixtQkFBcEIsRUFBNEIsV0FBNUIsRUFBZ0MsZUFBaEMsRUFBc0MsV0FBdEMsRUFBMEMseUJBQTFDLEVBQXFELGVBQXJELEVBQTJELGlCQUEzRCxFQUFrRSxpQkFBbEUsRUFBeUUsbUJBQXpFLEVBQWlGLGlCQUFqRixFQUF3Rjs7QUFFeEYsR0FBQSxHQUFnQixPQUFBLENBQVEsaUJBQVI7O0FBQ2hCLFFBQUEsR0FBZ0IsT0FBQSxDQUFRLFVBQVI7O0FBRWhCLEdBQUEsR0FBZ0IsUUFBUSxDQUFDOztBQUN6QixhQUFBLEdBQWdCLFFBQVEsQ0FBQzs7QUFDekIsSUFBQSxHQUFnQixRQUFRLENBQUM7O0FBQ3pCLElBQUEsR0FBZ0IsUUFBUSxDQUFDOztBQUN6QixTQUFBLEdBQWdCLFFBQVEsQ0FBQzs7QUFDekIsT0FBQSxHQUFnQixLQUFLLENBQUMsT0FBTixDQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFKLENBQVksVUFBWixDQUFELENBQUEsR0FBeUIsUUFBekM7O0FBRWhCLEdBQUEsR0FBZ0I7O0FBQ2hCLElBQUEsR0FBZ0I7O0FBRWhCLElBQUEsR0FBZ0I7O0FBQ2hCLE9BQUEsR0FBZ0I7O0FBQ2hCLE9BQUEsR0FBZ0I7O0FBRWhCLE9BQU8sQ0FBQyxFQUFSLENBQVcsbUJBQVgsRUFBK0IsU0FBQyxHQUFEO0lBQzNCLE1BQU0sQ0FBQyxNQUFQLENBQWMsR0FBZCxFQUFtQixJQUFuQjtXQUNBO0FBRjJCLENBQS9COztBQUlBLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBVixHQUFpQixLQUFLLENBQUMsT0FBTixDQUFjLEtBQUssQ0FBQyxPQUFOLENBQWMsS0FB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QUFhLGFBRGI7b0JBRUEsS0FBQSxFQUFhLFNBQUE7NkNBQUcsR0FBRyxDQUFFLEtBQUwsQ0FBQTtvQkFBSCxDQUZiO2lCQURLLEVBS0w7b0JBQUEsSUFBQSxFQUFNLFdBQU47aUJBTEssRUFPTDtvQkFBQSxLQUFBLEVBQWEsZUFBYjtvQkFDQSxXQUFBLEVBQWEsaUJBRGI7b0JBRUEsS0FBQSxFQUFhLFNBQUE7K0JBQUcsWUFBQSxDQUFBO29CQUFILENBRmI7aUJBUEssRUFXTDtvQkFBQSxLQUFBLEVBQWEsaUJBQWI7b0JBQ0EsV0FBQSxFQUFhLGlCQURiO29CQUVBLEtBQUEsRUFBYSxTQUFBOzZDQUFHLEdBQUcsQ0FBRSxXQUFXLENBQUMsWUFBakIsQ0FBQTtvQkFBSCxDQUZiO2lCQVhLO2FBRFQ7U0F2QjJDO0tBQXZCLENBQXhCO0lBeUNBLEtBQUssQ0FBQyxJQUFOLENBQVc7UUFBQSxRQUFBLEVBQVM7WUFBQSxRQUFBLEVBQVMsSUFBVDtTQUFUO0tBQVg7SUFFQSxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQXhCLENBQWlDLEtBQUssQ0FBQyxHQUFOLENBQVUsVUFBVixDQUFqQyxFQUF3RCxZQUF4RDtJQUVBLEVBQUUsQ0FBQyxhQUFILENBQWlCLE9BQWpCO0lBRUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxXQUFSO0lBQ04sSUFBRyxLQUFLLENBQUMsR0FBTixDQUFBLENBQUg7UUFDSSxPQUFBLEdBQVUsR0FBRyxDQUFDLFVBQUosQ0FBQSxFQURkO0tBQUEsTUFBQTtRQUdJLE9BQUEsR0FBVSxHQUFHLENBQUMsVUFBSixDQUFBLEVBSGQ7O1dBS0EsUUFBQSxDQUFBO0FBckZXLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwXG4wMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAwMDAgMCAwMDBcbjAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwXG4jIyNcblxueyBhYm91dCwgYXBwLCBhcmdzLCBjaGlsZHAsIGZzLCBrbG9nLCBvcywgb3Nhc2NyaXB0LCBwb3N0LCBwcmVmcywgc2xhc2gsIHNyY21hcCwgdmFsaWQsIHdpbiB9ID0gcmVxdWlyZSAna3hrJ1xuXG5wa2cgICAgICAgICAgID0gcmVxdWlyZSAnLi4vcGFja2FnZS5qc29uJ1xuZWxlY3Ryb24gICAgICA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuXG5hcHAgICAgICAgICAgID0gZWxlY3Ryb24uYXBwXG5Ccm93c2VyV2luZG93ID0gZWxlY3Ryb24uQnJvd3NlcldpbmRvd1xuVHJheSAgICAgICAgICA9IGVsZWN0cm9uLlRyYXlcbk1lbnUgICAgICAgICAgPSBlbGVjdHJvbi5NZW51XG5jbGlwYm9hcmQgICAgID0gZWxlY3Ryb24uY2xpcGJvYXJkXG5pY29uRGlyICAgICAgID0gc2xhc2gucmVzb2x2ZSBcIiN7YXBwLmdldFBhdGgoJ3VzZXJEYXRhJyl9L2ljb25zXCJcblxud2luICAgICAgICAgICA9IG51bGxcbnRyYXkgICAgICAgICAgPSBudWxsXG5cbmFwcHMgICAgICAgICAgPSB7fVxuc2NyaXB0cyAgICAgICA9IHt9XG5hbGxLZXlzICAgICAgID0gW11cblxucHJvY2Vzcy5vbiAndW5jYXVnaHRFeGNlcHRpb24nIChlcnIpIC0+XG4gICAgc3JjbWFwLmxvZ0VyciBlcnIsICfwn5S7J1xuICAgIHRydWVcblxua2xvZy5zbG9nLmljb24gPSBzbGFzaC5maWxlVXJsIHNsYXNoLnJlc29sdmUgc2xhc2guam9pbiBfX2Rpcm5hbWUsICcuLicgJ2ltZycgJ21lbnVAMngucG5nJ1xuXG5hcHAuc2V0TmFtZSBwa2cucHJvZHVjdE5hbWVcblxuYXJncyA9IGFyZ3MuaW5pdCBcIlwiXCJcbiAgICB2ZXJib3NlICAgICBsb2cgdmVyYm9zZSAgICAgZmFsc2VcbiAgICBkZWJ1ZyAgICAgICBsb2cgZGVidWcgICAgICAgZmFsc2UgIC1EXG5cIlwiXCJcblxuIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgIFxuIyAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgIFxuIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgICAgIDAwMCAgIFxuIyAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIFxuXG5wb3N0Lm9uICd3aW5sb2cnICAgICh0ZXh0KSAtPiBsb2cgXCI+Pj4gXCIgKyB0ZXh0XG5wb3N0Lm9uICdydW5TY3JpcHQnIChuYW1lKSAtPiBzY3JpcHRzW25hbWVdLmNiKClcbnBvc3Qub24gJ2hpZGVXaW4nICAtPiB3aW4/LmhpZGUoKVxucG9zdC5vbiAnY2FuY2VsJyAgIC0+IGFjdGl2YXRlQXBwKClcbnBvc3Qub24gJ2Fib3V0JyAgICAtPiBzaG93QWJvdXQoKVxucG9zdC5vbiAnZmluZEFwcHMnIC0+IGZpbmRBcHBzKClcbnBvc3Qub24gJ2RldlRvb2xzJyAtPiB3aW4/LndlYkNvbnRlbnRzLm9wZW5EZXZUb29scyBtb2RlOidkZXRhY2gnXG5wb3N0Lm9uR2V0ICdhcHBzJyAtPiBhcHBzOiBhcHBzLCBzY3JpcHRzOnNjcmlwdHMsIGFsbEtleXM6YWxsS2V5c1xuXG5lbGVjdHJvbi5pcGNNYWluLm9uICdnZXRXaW5Cb3VuZHMnIChlKSAtPiBlLnJldHVyblZhbHVlID0gd2luPy5nZXRCb3VuZHMoKVxuZWxlY3Ryb24uaXBjTWFpbi5vbiAnZ2V0U2NyZWVuU2l6ZScgKGUpIC0+IGUucmV0dXJuVmFsdWUgPSBlbGVjdHJvbi5zY3JlZW4uZ2V0UHJpbWFyeURpc3BsYXkoKS53b3JrQXJlYVNpemVcbmVsZWN0cm9uLmlwY01haW4ub24gJ3NldFdpbkJvdW5kcycgKGUsYikgLT4gXG4gICAga2xvZyAnc2V0V2luQm91bmRzJyB3aW4/LCBiXG4gICAgd2luPy5zZXRCb3VuZHMgYlxuXG4jIDAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4jIDAwMDAwMCAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgICAgICAgIDAwMCAgXG4jIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgICAwMDAwMDAwICAgXG5cbmZpbmRBcHBzID0gLT5cblxuICAgIHNvcnRLZXlzID0gLT5cblxuICAgICAgICBhbGxLZXlzID0gT2JqZWN0LmtleXMoYXBwcykuY29uY2F0IE9iamVjdC5rZXlzKHNjcmlwdHMpXG4gICAgICAgIGFsbEtleXMuc29ydCAoYSxiKSAtPiBhLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZSBiLnRvTG93ZXJDYXNlKClcbiAgICAgICAgXG4gICAgICAgIGlmIHdpblxuICAgICAgICAgICAgcG9zdC50b1dpbnMgJ2FwcHNGb3VuZCdcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3JlYXRlV2luZG93KClcbiAgICAgICAgICAgIGhpZGVXaW4gPSAtPiB3aW4/LmhpZGUoKVxuICAgICAgICAgICAgaWYgbm90IGFyZ3MuZGVidWdcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0IGhpZGVXaW4sIDEwMDBcbiAgICBcbiAgICBpZiBzbGFzaC53aW4oKVxuICAgICAgICBleGVGaW5kID0gcmVxdWlyZSAnLi9leGVmaW5kJ1xuICAgICAgICBleGVGaW5kIChleGVzKSAtPiBcbiAgICAgICAgICAgIGlmIHZhbGlkIGV4ZXNcbiAgICAgICAgICAgICAgICBhcHBzID0gZXhlc1xuICAgICAgICAgICAgICAgIHNvcnRLZXlzKClcbiAgICBlbHNlXG4gICAgICAgIGFwcEZpbmQgPSByZXF1aXJlICcuL2FwcGZpbmQnXG4gICAgICAgIGFwcEZpbmQgKGFwcGwpIC0+IFxuICAgICAgICAgICAgYXBwcyA9IGFwcGxcbiAgICAgICAgICAgIHNvcnRLZXlzKClcbiAgICAgICAgICAgIFxuIyAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwXG4jMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwXG4jMDAwMDAwMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMFxuIzAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgIDAwMFxuIzAwMCAgIDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgMCAgICAgIDAwMDAwMDAwXG5cbmFwcE5hbWUgICA9IG51bGxcbmFjdGl2ZUFwcCA9IG51bGxcbmFjdGl2ZVdpbiA9IG51bGxcblxuZ2V0QWN0aXZlQXBwID0gLT5cblxuICAgIGlmIHNsYXNoLndpbigpXG4gICAgICAgIHd4dyA9IHJlcXVpcmUgJ3d4dydcbiAgICAgICAgdG9wID0gd3h3KCdpbmZvJyAndG9wJylbMF1cbiAgICAgICAgaWYgdG9wPy5wYXRoP1xuICAgICAgICAgICAgYXBwTmFtZSA9IGFjdGl2ZUFwcCA9IHNsYXNoLmJhc2UgdG9wLnBhdGhcbiAgICBlbHNlXG4gICAgICAgIGFjdGl2ZUFwcCA9IGNoaWxkcC5leGVjU3luYyBcIiN7X19kaXJuYW1lfS8uLi9iaW4vYXBwc3dpdGNoIC1QXCIgZW5jb2Rpbmc6J3V0ZjgnXG5cbiAgICBrbG9nICdnZXRBY3RpdmVBcHAgYXBwTmFtZScgYXBwTmFtZSwgJy0+IGFjdGl2ZUFwcCcgYWN0aXZlQXBwICM/IGlmIGFyZ3MudmVyYm9zZVxuICAgICAgICBcbiAgICBpZiB3aW4/XG4gICAgICAgIGlmIGFwcE5hbWU/XG4gICAgICAgICAgICBrbG9nICdnZXRBY3RpdmVBcHAgcG9zdC5jdXJyZW50QXBwJyBhcHBOYW1lICNpZiBhcmdzLnZlcmJvc2VcbiAgICAgICAgICAgIHBvc3QudG9XaW5zICdjdXJyZW50QXBwJyBhcHBOYW1lXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGtsb2cgJ2dldEFjdGl2ZUFwcCBjbGVhclNlYXJjaCcgYXBwTmFtZSAjaWYgYXJncy52ZXJib3NlXG4gICAgICAgICAgICBwb3N0LnRvV2lucyAnY2xlYXJTZWFyY2gnXG4gICAgICAgICMga2xvZyAnZ2V0QWN0aXZlQXBwIGZhZGUnIGlmIGFyZ3MudmVyYm9zZVxuICAgICAgICBwb3N0LnRvV2lucyAnZmFkZSdcbiAgICBlbHNlXG4gICAgICAgIGNyZWF0ZVdpbmRvdygpXG5cbiMgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAgICAwICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICBcblxuYWN0aXZhdGVBcHAgPSAtPlxuXG4gICAgaWYgc2xhc2gud2luKClcbiAgICAgICAgaWYgYWN0aXZlV2luXG4gICAgICAgICAgICB3eHcgPSByZXF1aXJlICd3eHcnXG4gICAgICAgICAgICBpbmZvID0gd3h3KCdpbmZvJyBhY3RpdmVXaW4pWzBdXG4gICAgICAgICAgICBpZiBpbmZvPy5wYXRoXG4gICAgICAgICAgICAgICAga2xvZyAnYWN0aXZhdGUnIGluZm8ucGF0aFxuICAgICAgICAgICAgICAgIHd4dyAnbGF1bmNoJyBpbmZvLnBhdGhcbiAgICAgICAgICAgICAgICAjIHd4dyAncmFpc2UnIGluZm8ucGF0aFxuICAgICAgICAgICAgICAgICMgd3h3ICdmb2N1cycgaW5mby5wYXRoXG4gICAgICAgIHdpbj8uaGlkZSgpXG4gICAgZWxzZVxuICAgICAgICBpZiBub3QgYWN0aXZlQXBwP1xuICAgICAgICAgICAgd2luPy5oaWRlKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY2hpbGRwLmV4ZWMgXCIje19fZGlybmFtZX0vLi4vYmluL2FwcHN3aXRjaCAtZnAgI3thY3RpdmVBcHB9XCIgKGVycikgLT4gd2luPy5oaWRlKClcblxuIzAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiMwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwXG4jMDAwMDAwMDAwICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuIzAwMCAgIDAwMCAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiMwMCAgICAgMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAgICAgIDAwXG5cbnRvZ2dsZVdpbmRvdyA9IC0+XG4gICAgXG4gICAgaWYgd2luPy5pc1Zpc2libGUoKVxuICAgICAgICBpZiBwcmVmcy5nZXQgJ2hpZGVPbkRvdWJsZUFjdGl2YXRpb24nIGZhbHNlXG4gICAgICAgICAgICB3aW4uaGlkZSgpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBvc3QudG9XaW5zICdvcGVuQ3VycmVudCdcbiAgICAgICAgICAgICMgYWN0aXZhdGVBcHAoKSBpZiBub3Qgc2xhc2gud2luKClcbiAgICBlbHNlXG4gICAgICAgIGlmIHNsYXNoLndpbigpXG4gICAgICAgICAgICBpZiBub3Qgd2luP1xuICAgICAgICAgICAgICAgIGNyZWF0ZVdpbmRvdygpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2V0QWN0aXZlQXBwKClcbiAgICAgICAgICAgICAgICB3aW4uZm9jdXMoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvc2FzY3JpcHQgPSByZXF1aXJlKCdvc2FzY3JpcHQnKS5ldmFsXG4gICAgICAgICAgICBvc2FzY3JpcHQgXCJcIlwiXG4gICAgICAgICAgICAgICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgICAgICAgICAgICAgICBzZXQgbiB0byBuYW1lIG9mIGZpcnN0IGFwcGxpY2F0aW9uIHByb2Nlc3Mgd2hvc2UgZnJvbnRtb3N0IGlzIHRydWVcbiAgICAgICAgICAgICAgICBlbmQgdGVsbFxuICAgICAgICAgICAgICAgIGRvIHNoZWxsIHNjcmlwdCBcImVjaG8gXCIgJiBuXG4gICAgICAgICAgICAgICAgXCJcIlwiLCB0eXBlOidBcHBsZVNjcmlwdCcsIChlcnIsbmFtZSkgLT5cbiAgICAgICAgICAgICAgICAgICAgYXBwTmFtZSA9IFN0cmluZyhuYW1lKS50cmltKClcbiAgICAgICAgICAgICAgICAgICAga2xvZyAndG9nZ2xlV2luZG93IGFwcE5hbWUnIGFwcE5hbWVcbiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHdpbj9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVdpbmRvdygpXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEFjdGl2ZUFwcCgpXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW4uc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW4uZm9jdXMoKVxuXG5yZWxvYWRXaW5kb3cgPSAtPiB3aW4ud2ViQ29udGVudHMucmVsb2FkSWdub3JpbmdDYWNoZSgpXG5cbiMgIDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuIyAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4jICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIFxuXG5jcmVhdGVXaW5kb3cgPSAtPlxuXG4gICAgcmV0dXJuIGlmIHdpbj9cblxuICAgIHdpbiA9IG5ldyBCcm93c2VyV2luZG93XG4gICAgICAgIHdpZHRoOiAgICAgICAgICAgMzAwXG4gICAgICAgIGhlaWdodDogICAgICAgICAgMzAwXG4gICAgICAgIGNlbnRlcjogICAgICAgICAgdHJ1ZVxuICAgICAgICBhbHdheXNPblRvcDogICAgIHRydWVcbiAgICAgICAgbW92YWJsZTogICAgICAgICB0cnVlXG4gICAgICAgIHJlc2l6YWJsZTogICAgICAgdHJ1ZVxuICAgICAgICB0cmFuc3BhcmVudDogICAgIHRydWVcbiAgICAgICAgZnJhbWU6ICAgICAgICAgICBmYWxzZVxuICAgICAgICBtYXhpbWl6YWJsZTogICAgIGZhbHNlXG4gICAgICAgIG1pbmltaXphYmxlOiAgICAgZmFsc2VcbiAgICAgICAgbWluV2lkdGg6ICAgICAgICAyMDBcbiAgICAgICAgbWluSGVpZ2h0OiAgICAgICAyMDBcbiAgICAgICAgbWF4V2lkdGg6ICAgICAgICA2MDBcbiAgICAgICAgbWF4SGVpZ2h0OiAgICAgICA2MDBcbiAgICAgICAgZnVsbHNjcmVlbjogICAgICBmYWxzZVxuICAgICAgICBzaG93OiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIHdlYlByZWZlcmVuY2VzOlxuICAgICAgICAgICAgICAgIHdlYlNlY3VyaXR5OiAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgIGNvbnRleHRJc29sYXRpb246ICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbjogICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgbm9kZUludGVncmF0aW9uSW5Xb3JrZXI6IHRydWVcblxuICAgIGJvdW5kcyA9IHByZWZzLmdldCAnYm91bmRzJ1xuICAgIHdpbi5zZXRCb3VuZHMgYm91bmRzIGlmIGJvdW5kcz9cbiAgICB3aW4ubG9hZFVSTCBcImZpbGU6Ly8je19fZGlybmFtZX0vaW5kZXguaHRtbFwiXG4gICAgIyB3aW4ub24gJ2Nsb3NlZCcgLT4gd2luID0gbnVsbFxuICAgIHdpbi5vbiAncmVzaXplJyBvbldpblJlc2l6ZVxuICAgIHdpbi5vbiAnbW92ZScgICBzYXZlQm91bmRzXG4gICAgd2luLm9uICdyZWFkeS10by1zaG93JyAtPlxuICAgICAgICBnZXRBY3RpdmVBcHAoKVxuICAgICAgICBpZiBhcmdzLmRlYnVnXG4gICAgICAgICAgICB3aW4ud2ViQ29udGVudHMub3BlbkRldlRvb2xzIG1vZGU6J2RldGFjaCdcbiAgICAgICAgd2luLnNob3coKVxuICAgICAgICB3aW4uZm9jdXMoKVxuICAgIHdpblxuXG5zYXZlQm91bmRzID0gLT4gaWYgd2luPyB0aGVuIHByZWZzLnNldCAnYm91bmRzJyB3aW4uZ2V0Qm91bmRzKClcblxuc3F1YXJlVGltZXIgPSBudWxsXG5cbm9uV2luUmVzaXplID0gKGV2ZW50KSAtPlxuICAgIFxuICAgIGNsZWFyVGltZW91dCBzcXVhcmVUaW1lclxuICAgIGFkanVzdFNpemUgPSAtPlxuICAgICAgICBiID0gd2luLmdldEJvdW5kcygpXG4gICAgICAgIGlmIGIud2lkdGggIT0gYi5oZWlnaHRcbiAgICAgICAgICAgIGIud2lkdGggPSBiLmhlaWdodCA9IE1hdGgubWluIGIud2lkdGgsIGIuaGVpZ2h0XG4gICAgICAgICAgICB3aW4uc2V0Qm91bmRzIGJcbiAgICAgICAgc2F2ZUJvdW5kcygpXG4gICAgc3F1YXJlVGltZXIgPSBzZXRUaW1lb3V0IGFkanVzdFNpemUsIDMwMFxuXG5zaG93QWJvdXQgPSAtPlxuICAgIFxuICAgIGlmIHByZWZzLmdldCgnc2NoZW1lJyAnZGFyaycpID09ICdicmlnaHQnXG4gICAgICAgIGNvbG9yID0gJyNmZmYnXG4gICAgICAgIHRleHRjID0gJyNkZGQnXG4gICAgICAgIGhpZ2hsID0gJyMwMDAnXG4gICAgZWxzZVxuICAgICAgICB0ZXh0YyA9ICcjNDQ0J1xuICAgICAgICBoaWdobCA9ICcjZmZmJ1xuICAgICAgICBjb2xvciA9ICcjMTExJ1xuICAgICAgICBcbiAgICBhYm91dFxuICAgICAgICBpbWc6ICAgICAgICBcIiN7X19kaXJuYW1lfS8uLi9pbWcvYWJvdXQucG5nXCJcbiAgICAgICAgY29sb3I6ICAgICAgdGV4dGNcbiAgICAgICAgaGlnaGxpZ2h0OiAgaGlnaGxcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3JcbiAgICAgICAgc2l6ZTogICAgICAgMjAwXG4gICAgICAgIHBrZzogICAgICAgIHBrZ1xuXG5hcHAub24gJ3dpbmRvdy1hbGwtY2xvc2VkJyAoZXZlbnQpIC0+IGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuIzAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgICAwMDBcbiMwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMCAwMDBcbiMwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAwMDAwMFxuIzAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDBcbiMwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgICAgMDAwXG5cbmFwcC5vbiAncmVhZHknIC0+XG5cbiAgICBpZiBhcHAucmVxdWVzdFNpbmdsZUluc3RhbmNlTG9jaz9cbiAgICAgICAgXG4gICAgICAgIGlmIGFwcC5yZXF1ZXN0U2luZ2xlSW5zdGFuY2VMb2NrKClcbiAgICAgICAgICAgIGFwcC5vbiAnc2Vjb25kLWluc3RhbmNlJyB0b2dnbGVXaW5kb3dcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYXBwLmV4aXQgMFxuICAgIFxuICAgIHRyYXkgPSBuZXcgVHJheSBcIiN7X19kaXJuYW1lfS8uLi9pbWcvbWVudS5wbmdcIlxuICAgIHRyYXkub24gJ2NsaWNrJyB0b2dnbGVXaW5kb3dcbiAgICBcbiAgICBpZiBvcy5wbGF0Zm9ybSgpICE9ICdkYXJ3aW4nXG4gICAgICAgIHRyYXkuc2V0Q29udGV4dE1lbnUgTWVudS5idWlsZEZyb21UZW1wbGF0ZSBbXG4gICAgICAgICAgICBsYWJlbDogXCJRdWl0XCJcbiAgICAgICAgICAgIGNsaWNrOiAtPiBhcHAuZXhpdCAwOyBwcm9jZXNzLmV4aXQgMFxuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogXCJBYm91dFwiXG4gICAgICAgICAgICBjbGljazogc2hvd0Fib3V0XG4gICAgICAgICxcbiAgICAgICAgICAgIGxhYmVsOiBcIkFjdGl2YXRlXCJcbiAgICAgICAgICAgIGNsaWNrOiB0b2dnbGVXaW5kb3dcbiAgICAgICAgXVxuICAgICAgICBcbiAgICBhcHAuZG9jaz8uaGlkZSgpXG5cbiAgICAjIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwXG5cbiAgICBNZW51LnNldEFwcGxpY2F0aW9uTWVudSBNZW51LmJ1aWxkRnJvbVRlbXBsYXRlIFtcbiAgICAgICAgbGFiZWw6IGFwcC5nZXROYW1lKClcbiAgICAgICAgc3VibWVudTogW1xuICAgICAgICAgICAgbGFiZWw6IFwiQWJvdXQgI3twa2cubmFtZX1cIlxuICAgICAgICAgICAgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrLidcbiAgICAgICAgICAgIGNsaWNrOiAtPiBzaG93QWJvdXQoKVxuICAgICAgICAsXG4gICAgICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJ1xuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogJ1F1aXQnXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtRJ1xuICAgICAgICAgICAgY2xpY2s6IC0+XG4gICAgICAgICAgICAgICAgc2F2ZUJvdW5kcygpXG4gICAgICAgICAgICAgICAgYXBwLmV4aXQgMFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCAwXG4gICAgICAgIF1cbiAgICAsXG4gICAgICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICAgICAjIDAwMCAwIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDBcbiAgICAgICAgIyAwMDAwMDAwMDAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwXG4gICAgICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICAgICAjIDAwICAgICAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMCAgICAgMDBcblxuICAgICAgICBsYWJlbDogJ1dpbmRvdydcbiAgICAgICAgc3VibWVudTogW1xuICAgICAgICAgICAgbGFiZWw6ICAgICAgICdDbG9zZSBXaW5kb3cnXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtXJ1xuICAgICAgICAgICAgY2xpY2s6ICAgICAgIC0+IHdpbj8uY2xvc2UoKVxuICAgICAgICAsXG4gICAgICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJ1xuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogICAgICAgJ1JlbG9hZCBXaW5kb3cnXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtBbHQrTCdcbiAgICAgICAgICAgIGNsaWNrOiAgICAgICAtPiByZWxvYWRXaW5kb3coKVxuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogICAgICAgJ1RvZ2dsZSBEZXZUb29scydcbiAgICAgICAgICAgIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0FsdCtJJ1xuICAgICAgICAgICAgY2xpY2s6ICAgICAgIC0+IHdpbj8ud2ViQ29udGVudHMub3BlbkRldlRvb2xzKClcbiAgICAgICAgXVxuICAgIF1cblxuICAgIHByZWZzLmluaXQgZGVmYXVsdHM6c2hvcnRjdXQ6J0YxJ1xuXG4gICAgZWxlY3Ryb24uZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIgcHJlZnMuZ2V0KCdzaG9ydGN1dCcpLCB0b2dnbGVXaW5kb3dcblxuICAgIGZzLmVuc3VyZURpclN5bmMgaWNvbkRpclxuXG4gICAgc2NyID0gcmVxdWlyZSAnLi9zY3JpcHRzJ1xuICAgIGlmIHNsYXNoLndpbigpXG4gICAgICAgIHNjcmlwdHMgPSBzY3Iud2luU2NyaXB0cygpXG4gICAgZWxzZVxuICAgICAgICBzY3JpcHRzID0gc2NyLm1hY1NjcmlwdHMoKVxuICAgIFxuICAgIGZpbmRBcHBzKClcbiAgICAgICAgXG4gICAgICAgICAgICAiXX0=
//# sourceURL=../coffee/main.coffee