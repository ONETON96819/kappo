// koffee 1.3.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var BrowserWindow, Menu, Tray, _, about, activateApp, activeApp, activeWin, allKeys, app, appName, apps, args, childp, clipboard, createWindow, electron, findApps, fs, getActiveApp, iconDir, karg, klog, kstr, onWinResize, os, pkg, post, prefs, ref, reloadWindow, saveBounds, scripts, showAbout, slash, squareTimer, srcmap, toggleWindow, tray, valid, walkdir, win;

ref = require('kxk'), post = ref.post, srcmap = ref.srcmap, walkdir = ref.walkdir, about = ref.about, args = ref.args, childp = ref.childp, prefs = ref.prefs, karg = ref.karg, valid = ref.valid, slash = ref.slash, kstr = ref.kstr, klog = ref.klog, os = ref.os, fs = ref.fs, _ = ref._;

pkg = require('../package.json');

electron = require('electron');

app = electron.app;

BrowserWindow = electron.BrowserWindow;

Tray = electron.Tray;

Menu = electron.Menu;

clipboard = electron.clipboard;

iconDir = slash.resolve((app.getPath('userData')) + "/icons");

win = null;

tray = null;

apps = {};

scripts = {};

allKeys = [];

process.on('uncaughtException', function(err) {
    srcmap.logErr(err, 'ðŸ”»');
    return true;
});

klog.slog.icon = slash.fileUrl(slash.resolve(slash.join(__dirname, '..', 'img', 'menu@2x.png')));

app.setName(pkg.productName);

args = args.init("verbose     log verbose     false\ndebug       log debug       false  -D");

post.on('winlog', function(text) {
    return console.log(">>> " + text);
});

post.on('runScript', function(name) {
    return scripts[name].cb();
});

post.on('cancel', function() {
    return activateApp();
});

post.on('about', function() {
    return showAbout();
});

post.on('findApps', function() {
    return findApps();
});

post.onGet('apps', function() {
    return {
        apps: apps,
        scripts: scripts,
        allKeys: allKeys
    };
});

findApps = function() {
    var appFind, exeFind, sortKeys;
    sortKeys = function() {
        var hideWin;
        allKeys = Object.keys(apps).concat(Object.keys(scripts));
        allKeys.sort(function(a, b) {
            return a.toLowerCase().localeCompare(b.toLowerCase());
        });
        if (win) {
            return post.toWins('appsFound');
        } else {
            createWindow();
            hideWin = function() {
                return win != null ? win.hide() : void 0;
            };
            if (!args.debug) {
                return setTimeout(hideWin, 1000);
            }
        }
    };
    if (slash.win()) {
        exeFind = require('./exefind');
        return exeFind(function(exes) {
            if (valid(exes)) {
                apps = exes;
                return sortKeys();
            }
        });
    } else {
        appFind = require('./appfind');
        return appFind(function(appl) {
            apps = appl;
            return sortKeys();
        });
    }
};

appName = null;

activeApp = null;

activeWin = null;

getActiveApp = function() {
    var top, wxw;
    if (slash.win()) {
        wxw = require('wxw');
        top = wxw('info', 'top')[0];
        if ((top != null ? top.path : void 0) != null) {
            appName = activeApp = slash.base(top.path);
        }
    } else {
        activeApp = childp.execSync(__dirname + "/../bin/appswitch -P");
    }
    if (args.verbose) {
        console.log('getActiveApp', appName, activeApp, win != null);
    }
    if (win != null) {
        if (appName != null) {
            if (args.verbose) {
                console.log('getActiveApp currentApp', appName);
            }
            post.toWins('currentApp', appName);
        } else {
            if (args.verbose) {
                console.log('getActiveApp clearSearch', appName);
            }
            post.toWins('clearSearch');
        }
        if (args.verbose) {
            console.log('getActiveApp fade');
        }
        return post.toWins('fade');
    } else {
        return createWindow();
    }
};

activateApp = function() {
    var info, wxw;
    if (slash.win()) {
        if (activeWin) {
            wxw = require('wxw');
            info = wxw('info', activeWin)[0];
            if (info != null ? info.path : void 0) {
                klog('activate', info.path);
                wxw('launch', info.path);
            }
        }
        return win != null ? win.hide() : void 0;
    } else {
        if (activeApp == null) {
            return win != null ? win.hide() : void 0;
        } else {
            return childp.exec(__dirname + "/../bin/appswitch -fp " + activeApp, function(err) {
                return win != null ? win.hide() : void 0;
            });
        }
    }
};

toggleWindow = function() {
    var osascript;
    if (win != null ? win.isVisible() : void 0) {
        if (prefs.get('hideOnDoubleActivation', false)) {
            return win.hide();
        } else {
            post.toWins('openCurrent');
            if (!slash.win()) {
                return activateApp();
            }
        }
    } else {
        if (slash.win()) {
            if (win == null) {
                return createWindow();
            } else {
                getActiveApp();
                return win.focus();
            }
        } else {
            osascript = require('osascript')["eval"];
            return osascript("tell application \"System Events\"\n    set n to name of first application process whose frontmost is true\nend tell\ndo shell script \"echo \" & n", {
                type: 'AppleScript'
            }, function(err, name) {
                appName = String(name).trim();
                if (win == null) {
                    return createWindow();
                } else {
                    getActiveApp();
                    return win.focus();
                }
            });
        }
    }
};

reloadWindow = function() {
    return win.webContents.reloadIgnoringCache();
};

createWindow = function() {
    var bounds;
    if (win != null) {
        return;
    }
    win = new BrowserWindow({
        width: 300,
        height: 300,
        center: true,
        alwaysOnTop: true,
        movable: true,
        resizable: true,
        transparent: true,
        frame: false,
        maximizable: false,
        minimizable: false,
        minWidth: 200,
        minHeight: 200,
        maxWidth: 600,
        maxHeight: 600,
        fullscreen: false,
        show: false,
        webPreferences: {
            nodeIntegration: true
        }
    });
    bounds = prefs.get('bounds');
    if (bounds != null) {
        win.setBounds(bounds);
    }
    win.loadURL("file://" + __dirname + "/index.html");
    win.on('closed', function() {
        return win = null;
    });
    win.on('resize', onWinResize);
    win.on('move', saveBounds);
    win.on('ready-to-show', function() {
        getActiveApp();
        if (args.debug) {
            win.show();
            return win.webContents.openDevTools();
        }
    });
    return win;
};

saveBounds = function() {
    if (win != null) {
        return prefs.set('bounds', win.getBounds());
    }
};

squareTimer = null;

onWinResize = function(event) {
    var adjustSize;
    clearTimeout(squareTimer);
    adjustSize = function() {
        var b;
        b = win.getBounds();
        if (b.width !== b.height) {
            b.width = b.height = Math.min(b.width, b.height);
            win.setBounds(b);
        }
        return saveBounds();
    };
    return squareTimer = setTimeout(adjustSize, 300);
};

showAbout = function() {
    var color, highl, textc;
    if (prefs.get('scheme', 'bright') === 'bright') {
        color = '#fff';
        textc = '#ddd';
        highl = '#000';
    } else {
        textc = '#444';
        highl = '#fff';
        color = '#111';
    }
    return about({
        img: __dirname + "/../img/about.png",
        color: textc,
        highlight: highl,
        background: color,
        size: 200,
        pkg: pkg
    });
};

app.on('window-all-closed', function(event) {
    return event.preventDefault();
});

app.on('ready', function() {
    var ref1, scr;
    if (app.requestSingleInstanceLock != null) {
        if (app.requestSingleInstanceLock()) {
            app.on('second-instance', toggleWindow);
        } else {
            app.exit(0);
        }
    }
    tray = new Tray(__dirname + "/../img/menu.png");
    tray.on('click', toggleWindow);
    if (os.platform() !== 'darwin') {
        tray.setContextMenu(Menu.buildFromTemplate([
            {
                label: "Quit",
                click: function() {
                    app.exit(0);
                    return process.exit(0);
                }
            }, {
                label: "About",
                click: showAbout
            }, {
                label: "Activate",
                click: toggleWindow
            }
        ]));
    }
    if ((ref1 = app.dock) != null) {
        ref1.hide();
    }
    Menu.setApplicationMenu(Menu.buildFromTemplate([
        {
            label: app.getName(),
            submenu: [
                {
                    label: "About " + pkg.name,
                    accelerator: 'CmdOrCtrl+.',
                    click: function() {
                        return showAbout();
                    }
                }, {
                    type: 'separator'
                }, {
                    label: 'Quit',
                    accelerator: 'CmdOrCtrl+Q',
                    click: function() {
                        saveBounds();
                        app.exit(0);
                        return process.exit(0);
                    }
                }
            ]
        }, {
            label: 'Window',
            submenu: [
                {
                    label: 'Close Window',
                    accelerator: 'CmdOrCtrl+W',
                    click: function() {
                        return win != null ? win.close() : void 0;
                    }
                }, {
                    type: 'separator'
                }, {
                    label: 'Reload Window',
                    accelerator: 'CmdOrCtrl+Alt+L',
                    click: function() {
                        return reloadWindow();
                    }
                }, {
                    label: 'Toggle DevTools',
                    accelerator: 'CmdOrCtrl+Alt+I',
                    click: function() {
                        return win != null ? win.webContents.openDevTools() : void 0;
                    }
                }
            ]
        }
    ]));
    prefs.init({
        defaults: {
            shortcut: 'F1'
        }
    });
    electron.globalShortcut.register(prefs.get('shortcut'), toggleWindow);
    fs.ensureDirSync(iconDir);
    scr = require('./scripts');
    if (slash.win()) {
        scripts = scr.winScripts();
    } else {
        scripts = scr.macScripts();
    }
    return findApps();
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/main.coffee