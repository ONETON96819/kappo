// koffee 1.3.0

/*
00     00   0000000   000  000   000
000   000  000   000  000  0000  000
000000000  000000000  000  000 0 000
000 0 000  000   000  000  000  0000
000   000  000   000  000  000   000
 */
var BrowserWindow, Menu, Tray, _, about, activateApp, activeApp, activeWin, allKeys, app, appName, apps, args, childp, clipboard, createWindow, electron, findApps, fs, getActiveApp, iconDir, karg, klog, kstr, onWinResize, os, pkg, post, prefs, ref, reloadWindow, saveBounds, scripts, showAbout, slash, squareTimer, srcmap, toggleWindow, tray, valid, walkdir, win;

ref = require('kxk'), post = ref.post, srcmap = ref.srcmap, walkdir = ref.walkdir, about = ref.about, args = ref.args, childp = ref.childp, prefs = ref.prefs, karg = ref.karg, valid = ref.valid, slash = ref.slash, kstr = ref.kstr, klog = ref.klog, os = ref.os, fs = ref.fs, _ = ref._;

pkg = require('../package.json');

electron = require('electron');

app = electron.app;

BrowserWindow = electron.BrowserWindow;

Tray = electron.Tray;

Menu = electron.Menu;

clipboard = electron.clipboard;

iconDir = slash.resolve((app.getPath('userData')) + "/icons");

win = null;

tray = null;

apps = {};

scripts = {};

allKeys = [];

process.on('uncaughtException', function(err) {
    srcmap.logErr(err, 'ðŸ”»');
    return true;
});

klog.slog.icon = slash.fileUrl(slash.resolve(slash.join(__dirname, '..', 'img', 'menu@2x.png')));

app.setName(pkg.productName);

args = args.init("verbose     log verbose     false\ndebug       log debug       false  -D");

post.on('winlog', function(text) {
    return console.log(">>> " + text);
});

post.on('runScript', function(name) {
    return scripts[name].cb();
});

post.on('cancel', function() {
    return activateApp();
});

post.on('about', function() {
    return showAbout();
});

post.on('findApps', function() {
    return findApps();
});

post.onGet('apps', function() {
    return {
        apps: apps,
        scripts: scripts,
        allKeys: allKeys
    };
});

findApps = function() {
    var appFind, exeFind, sortKeys;
    sortKeys = function() {
        var hideWin;
        allKeys = Object.keys(apps).concat(Object.keys(scripts));
        allKeys.sort(function(a, b) {
            return a.toLowerCase().localeCompare(b.toLowerCase());
        });
        if (win) {
            return post.toWins('appsFound');
        } else {
            createWindow();
            hideWin = function() {
                return win != null ? win.hide() : void 0;
            };
            if (!args.debug) {
                return setTimeout(hideWin, 1000);
            }
        }
    };
    if (slash.win()) {
        exeFind = require('./exefind');
        return exeFind(function(exes) {
            if (valid(exes)) {
                apps = exes;
                return sortKeys();
            }
        });
    } else {
        appFind = require('./appfind');
        return appFind(function(appl) {
            apps = appl;
            return sortKeys();
        });
    }
};

appName = null;

activeApp = null;

activeWin = null;

getActiveApp = function() {
    var top, wxw;
    if (slash.win()) {
        wxw = require('wxw');
        top = wxw('info', 'top')[0];
        if ((top != null ? top.path : void 0) != null) {
            appName = activeApp = slash.base(top.path);
        }
    } else {
        activeApp = childp.execSync(__dirname + "/../bin/appswitch -P");
    }
    if (args.verbose) {
        console.log('getActiveApp', appName, activeApp, win != null);
    }
    if (win != null) {
        if (appName != null) {
            if (args.verbose) {
                console.log('getActiveApp currentApp', appName);
            }
            post.toWins('currentApp', appName);
        } else {
            if (args.verbose) {
                console.log('getActiveApp clearSearch', appName);
            }
            post.toWins('clearSearch');
        }
        if (args.verbose) {
            console.log('getActiveApp fade');
        }
        return post.toWins('fade');
    } else {
        return createWindow();
    }
};

activateApp = function() {
    var info, wxw;
    if (slash.win()) {
        if (activeWin) {
            wxw = require('wxw');
            info = wxw('info', activeWin)[0];
            if (info != null ? info.path : void 0) {
                klog('activate', info.path);
                wxw('launch', info.path);
            }
        }
        return win != null ? win.hide() : void 0;
    } else {
        if (activeApp == null) {
            return win != null ? win.hide() : void 0;
        } else {
            return childp.exec(__dirname + "/../bin/appswitch -fp " + activeApp, function(err) {
                return win != null ? win.hide() : void 0;
            });
        }
    }
};

toggleWindow = function() {
    var osascript;
    if (win != null ? win.isVisible() : void 0) {
        if (prefs.get('hideOnDoubleActivation', false)) {
            return win.hide();
        } else {
            post.toWins('openCurrent');
            if (!slash.win()) {
                return activateApp();
            }
        }
    } else {
        if (slash.win()) {
            if (win == null) {
                return createWindow();
            } else {
                getActiveApp();
                return win.focus();
            }
        } else {
            osascript = require('osascript')["eval"];
            return osascript("tell application \"System Events\"\n    set n to name of first application process whose frontmost is true\nend tell\ndo shell script \"echo \" & n", {
                type: 'AppleScript'
            }, function(err, name) {
                appName = String(name).trim();
                if (win == null) {
                    return createWindow();
                } else {
                    getActiveApp();
                    return win.focus();
                }
            });
        }
    }
};

reloadWindow = function() {
    return win.webContents.reloadIgnoringCache();
};

createWindow = function() {
    var bounds;
    if (win != null) {
        return;
    }
    win = new BrowserWindow({
        width: 300,
        height: 300,
        center: true,
        alwaysOnTop: true,
        movable: true,
        resizable: true,
        transparent: true,
        frame: false,
        maximizable: false,
        minimizable: false,
        minWidth: 200,
        minHeight: 200,
        maxWidth: 600,
        maxHeight: 600,
        fullscreen: false,
        show: false,
        webPreferences: {
            nodeIntegration: true
        }
    });
    bounds = prefs.get('bounds');
    if (bounds != null) {
        win.setBounds(bounds);
    }
    win.loadURL("file://" + __dirname + "/index.html");
    win.on('closed', function() {
        return win = null;
    });
    win.on('resize', onWinResize);
    win.on('move', saveBounds);
    win.on('ready-to-show', function() {
        getActiveApp();
        if (args.debug) {
            win.show();
            return win.webContents.openDevTools();
        }
    });
    return win;
};

saveBounds = function() {
    if (win != null) {
        return prefs.set('bounds', win.getBounds());
    }
};

squareTimer = null;

onWinResize = function(event) {
    var adjustSize;
    clearTimeout(squareTimer);
    adjustSize = function() {
        var b;
        b = win.getBounds();
        if (b.width !== b.height) {
            b.width = b.height = Math.min(b.width, b.height);
            win.setBounds(b);
        }
        return saveBounds();
    };
    return squareTimer = setTimeout(adjustSize, 300);
};

showAbout = function() {
    var color, highl, textc;
    if (prefs.get('scheme', 'bright') === 'bright') {
        color = '#fff';
        textc = '#ddd';
        highl = '#000';
    } else {
        textc = '#444';
        highl = '#fff';
        color = '#111';
    }
    return about({
        img: __dirname + "/../img/about.png",
        color: textc,
        highlight: highl,
        background: color,
        size: 200,
        pkg: pkg
    });
};

app.on('window-all-closed', function(event) {
    return event.preventDefault();
});

app.on('ready', function() {
    var ref1, scr;
    if (app.requestSingleInstanceLock != null) {
        if (app.requestSingleInstanceLock()) {
            app.on('second-instance', toggleWindow);
        } else {
            app.exit(0);
        }
    }
    tray = new Tray(__dirname + "/../img/menu.png");
    tray.on('click', toggleWindow);
    if (os.platform() !== 'darwin') {
        tray.setContextMenu(Menu.buildFromTemplate([
            {
                label: "Quit",
                click: function() {
                    app.exit(0);
                    return process.exit(0);
                }
            }, {
                label: "About",
                click: showAbout
            }, {
                label: "Activate",
                click: toggleWindow
            }
        ]));
    }
    if ((ref1 = app.dock) != null) {
        ref1.hide();
    }
    Menu.setApplicationMenu(Menu.buildFromTemplate([
        {
            label: app.getName(),
            submenu: [
                {
                    label: "About " + pkg.name,
                    accelerator: 'CmdOrCtrl+.',
                    click: function() {
                        return showAbout();
                    }
                }, {
                    type: 'separator'
                }, {
                    label: 'Quit',
                    accelerator: 'CmdOrCtrl+Q',
                    click: function() {
                        saveBounds();
                        app.exit(0);
                        return process.exit(0);
                    }
                }
            ]
        }, {
            label: 'Window',
            submenu: [
                {
                    label: 'Close Window',
                    accelerator: 'CmdOrCtrl+W',
                    click: function() {
                        return win != null ? win.close() : void 0;
                    }
                }, {
                    type: 'separator'
                }, {
                    label: 'Reload Window',
                    accelerator: 'CmdOrCtrl+Alt+L',
                    click: function() {
                        return reloadWindow();
                    }
                }, {
                    label: 'Toggle DevTools',
                    accelerator: 'CmdOrCtrl+Alt+I',
                    click: function() {
                        return win != null ? win.webContents.openDevTools() : void 0;
                    }
                }
            ]
        }
    ]));
    prefs.init({
        shortcut: 'F1'
    });
    electron.globalShortcut.register(prefs.get('shortcut'), toggleWindow);
    fs.ensureDirSync(iconDir);
    scr = require('./scripts');
    if (slash.win()) {
        scripts = scr.winScripts();
    } else {
        scripts = scr.macScripts();
    }
    return findApps();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBbUcsT0FBQSxDQUFRLEtBQVIsQ0FBbkcsRUFBRSxlQUFGLEVBQVEsbUJBQVIsRUFBZ0IscUJBQWhCLEVBQXlCLGlCQUF6QixFQUFnQyxlQUFoQyxFQUFzQyxtQkFBdEMsRUFBOEMsaUJBQTlDLEVBQXFELGVBQXJELEVBQTJELGlCQUEzRCxFQUFrRSxpQkFBbEUsRUFBeUUsZUFBekUsRUFBK0UsZUFBL0UsRUFBcUYsV0FBckYsRUFBeUYsV0FBekYsRUFBNkY7O0FBRTdGLEdBQUEsR0FBZ0IsT0FBQSxDQUFRLGlCQUFSOztBQUNoQixRQUFBLEdBQWdCLE9BQUEsQ0FBUSxVQUFSOztBQUVoQixHQUFBLEdBQWdCLFFBQVEsQ0FBQzs7QUFDekIsYUFBQSxHQUFnQixRQUFRLENBQUM7O0FBQ3pCLElBQUEsR0FBZ0IsUUFBUSxDQUFDOztBQUN6QixJQUFBLEdBQWdCLFFBQVEsQ0FBQzs7QUFDekIsU0FBQSxHQUFnQixRQUFRLENBQUM7O0FBQ3pCLE9BQUEsR0FBZ0IsS0FBSyxDQUFDLE9BQU4sQ0FBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBSixDQUFZLFVBQVosQ0FBRCxDQUFBLEdBQXlCLFFBQXpDOztBQUVoQixHQUFBLEdBQWdCOztBQUNoQixJQUFBLEdBQWdCOztBQUVoQixJQUFBLEdBQWdCOztBQUNoQixPQUFBLEdBQWdCOztBQUNoQixPQUFBLEdBQWdCOztBQUVoQixPQUFPLENBQUMsRUFBUixDQUFXLG1CQUFYLEVBQWdDLFNBQUMsR0FBRDtJQUM1QixNQUFNLENBQUMsTUFBUCxDQUFjLEdBQWQsRUFBbUIsSUFBbkI7V0FDQTtBQUY0QixDQUFoQzs7QUFJQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQVYsR0FBaUIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFLLENBQUMsT0FBTixDQUFjLEtBQUssQ0FB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QUMsYUFBSCxDQUFpQixPQUFqQjtJQUVBLEdBQUEsR0FBTSxPQUFBLENBQVEsV0FBUjtJQUNOLElBQUcsS0FBSyxDQUFDLEdBQU4sQ0FBQSxDQUFIO1FBQ0ksT0FBQSxHQUFVLEdBQUcsQ0FBQyxVQUFKLENBQUEsRUFEZDtLQUFBLE1BQUE7UUFHSSxPQUFBLEdBQVUsR0FBRyxDQUFDLFVBQUosQ0FBQSxFQUhkOztXQUtBLFFBQUEsQ0FBQTtBQXJGVyxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMCAgICAgMDAgICAwMDAwMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMFxuMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMCAgMDAwIDAgMDAwXG4wMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgIDAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMFxuIyMjXG5cbnsgcG9zdCwgc3JjbWFwLCB3YWxrZGlyLCBhYm91dCwgYXJncywgY2hpbGRwLCBwcmVmcywga2FyZywgdmFsaWQsIHNsYXNoLCBrc3RyLCBrbG9nLCBvcywgZnMsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxucGtnICAgICAgICAgICA9IHJlcXVpcmUgJy4uL3BhY2thZ2UuanNvbidcbmVsZWN0cm9uICAgICAgPSByZXF1aXJlICdlbGVjdHJvbidcblxuYXBwICAgICAgICAgICA9IGVsZWN0cm9uLmFwcFxuQnJvd3NlcldpbmRvdyA9IGVsZWN0cm9uLkJyb3dzZXJXaW5kb3dcblRyYXkgICAgICAgICAgPSBlbGVjdHJvbi5UcmF5XG5NZW51ICAgICAgICAgID0gZWxlY3Ryb24uTWVudVxuY2xpcGJvYXJkICAgICA9IGVsZWN0cm9uLmNsaXBib2FyZFxuaWNvbkRpciAgICAgICA9IHNsYXNoLnJlc29sdmUgXCIje2FwcC5nZXRQYXRoKCd1c2VyRGF0YScpfS9pY29uc1wiXG5cbndpbiAgICAgICAgICAgPSBudWxsXG50cmF5ICAgICAgICAgID0gbnVsbFxuXG5hcHBzICAgICAgICAgID0ge31cbnNjcmlwdHMgICAgICAgPSB7fVxuYWxsS2V5cyAgICAgICA9IFtdXG5cbnByb2Nlc3Mub24gJ3VuY2F1Z2h0RXhjZXB0aW9uJywgKGVycikgLT5cbiAgICBzcmNtYXAubG9nRXJyIGVyciwgJ/CflLsnXG4gICAgdHJ1ZVxuXG5rbG9nLnNsb2cuaWNvbiA9IHNsYXNoLmZpbGVVcmwgc2xhc2gucmVzb2x2ZSBzbGFzaC5qb2luIF9fZGlybmFtZSwgJy4uJywgJ2ltZycsICdtZW51QDJ4LnBuZydcblxuYXBwLnNldE5hbWUgcGtnLnByb2R1Y3ROYW1lXG5cbmFyZ3MgPSBhcmdzLmluaXQgXCJcIlwiXG4gICAgdmVyYm9zZSAgICAgbG9nIHZlcmJvc2UgICAgIGZhbHNlXG4gICAgZGVidWcgICAgICAgbG9nIGRlYnVnICAgICAgIGZhbHNlICAtRFxuXCJcIlwiXG5cbiMgMDAwMDAwMDAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAwMDAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbiMgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgICAwMDAgICBcbiMgMDAwICAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICAgICAwMDAgICBcbiMgMDAwICAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICBcblxucG9zdC5vbiAnd2lubG9nJywgICAgKHRleHQpIC0+IGxvZyBcIj4+PiBcIiArIHRleHRcbnBvc3Qub24gJ3J1blNjcmlwdCcsIChuYW1lKSAtPiBzY3JpcHRzW25hbWVdLmNiKClcbnBvc3Qub24gJ2NhbmNlbCcsICAgLT4gYWN0aXZhdGVBcHAoKVxucG9zdC5vbiAnYWJvdXQnLCAgICAtPiBzaG93QWJvdXQoKVxucG9zdC5vbiAnZmluZEFwcHMnLCAtPiBmaW5kQXBwcygpXG5cbnBvc3Qub25HZXQgJ2FwcHMnLCAtPiBhcHBzOiBhcHBzLCBzY3JpcHRzOnNjcmlwdHMsIGFsbEtleXM6YWxsS2V5c1xuXG4jIDAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4jIDAwMDAwMCAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgICAgICAgIDAwMCAgXG4jIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgICAwMDAwMDAwICAgXG5cbmZpbmRBcHBzID0gLT5cblxuICAgIHNvcnRLZXlzID0gLT5cblxuICAgICAgICBhbGxLZXlzID0gT2JqZWN0LmtleXMoYXBwcykuY29uY2F0IE9iamVjdC5rZXlzKHNjcmlwdHMpXG4gICAgICAgIGFsbEtleXMuc29ydCAoYSxiKSAtPiBhLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZSBiLnRvTG93ZXJDYXNlKClcbiAgICAgICAgXG4gICAgICAgIGlmIHdpblxuICAgICAgICAgICAgcG9zdC50b1dpbnMgJ2FwcHNGb3VuZCdcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3JlYXRlV2luZG93KClcbiAgICAgICAgICAgIGhpZGVXaW4gPSAtPiB3aW4/LmhpZGUoKVxuICAgICAgICAgICAgaWYgbm90IGFyZ3MuZGVidWdcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0IGhpZGVXaW4sIDEwMDBcbiAgICBcbiAgICBpZiBzbGFzaC53aW4oKVxuICAgICAgICBleGVGaW5kID0gcmVxdWlyZSAnLi9leGVmaW5kJ1xuICAgICAgICBleGVGaW5kIChleGVzKSAtPiBcbiAgICAgICAgICAgIGlmIHZhbGlkIGV4ZXNcbiAgICAgICAgICAgICAgICBhcHBzID0gZXhlc1xuICAgICAgICAgICAgICAgIHNvcnRLZXlzKClcbiAgICBlbHNlXG4gICAgICAgIGFwcEZpbmQgPSByZXF1aXJlICcuL2FwcGZpbmQnXG4gICAgICAgIGFwcEZpbmQgKGFwcGwpIC0+IFxuICAgICAgICAgICAgYXBwcyA9IGFwcGxcbiAgICAgICAgICAgIHNvcnRLZXlzKClcbiAgICAgICAgICAgIFxuIyAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwXG4jMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwXG4jMDAwMDAwMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMFxuIzAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgIDAwMFxuIzAwMCAgIDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgMCAgICAgIDAwMDAwMDAwXG5cbmFwcE5hbWUgICA9IG51bGxcbmFjdGl2ZUFwcCA9IG51bGxcbmFjdGl2ZVdpbiA9IG51bGxcblxuZ2V0QWN0aXZlQXBwID0gLT5cblxuICAgIGlmIHNsYXNoLndpbigpXG4gICAgICAgIHd4dyA9IHJlcXVpcmUgJ3d4dydcbiAgICAgICAgdG9wID0gd3h3KCdpbmZvJyAndG9wJylbMF1cbiAgICAgICAgaWYgdG9wPy5wYXRoP1xuICAgICAgICAgICAgYXBwTmFtZSA9IGFjdGl2ZUFwcCA9IHNsYXNoLmJhc2UgdG9wLnBhdGhcbiAgICBlbHNlXG4gICAgICAgIGFjdGl2ZUFwcCA9IGNoaWxkcC5leGVjU3luYyBcIiN7X19kaXJuYW1lfS8uLi9iaW4vYXBwc3dpdGNoIC1QXCJcblxuICAgIGxvZyAnZ2V0QWN0aXZlQXBwJywgYXBwTmFtZSwgYWN0aXZlQXBwLCB3aW4/IGlmIGFyZ3MudmVyYm9zZVxuICAgICAgICBcbiAgICBpZiB3aW4/XG4gICAgICAgIGlmIGFwcE5hbWU/XG4gICAgICAgICAgICBsb2cgJ2dldEFjdGl2ZUFwcCBjdXJyZW50QXBwJywgYXBwTmFtZSBpZiBhcmdzLnZlcmJvc2VcbiAgICAgICAgICAgIHBvc3QudG9XaW5zICdjdXJyZW50QXBwJywgYXBwTmFtZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBsb2cgJ2dldEFjdGl2ZUFwcCBjbGVhclNlYXJjaCcsIGFwcE5hbWUgaWYgYXJncy52ZXJib3NlXG4gICAgICAgICAgICBwb3N0LnRvV2lucyAnY2xlYXJTZWFyY2gnXG4gICAgICAgIGxvZyAnZ2V0QWN0aXZlQXBwIGZhZGUnIGlmIGFyZ3MudmVyYm9zZVxuICAgICAgICBwb3N0LnRvV2lucyAnZmFkZSdcbiAgICBlbHNlXG4gICAgICAgIGNyZWF0ZVdpbmRvdygpXG5cbiMgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAgICAwICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICBcblxuYWN0aXZhdGVBcHAgPSAtPlxuXG4gICAgaWYgc2xhc2gud2luKClcbiAgICAgICAgaWYgYWN0aXZlV2luXG4gICAgICAgICAgICB3eHcgPSByZXF1aXJlICd3eHcnXG4gICAgICAgICAgICBpbmZvID0gd3h3KCdpbmZvJyBhY3RpdmVXaW4pWzBdXG4gICAgICAgICAgICBpZiBpbmZvPy5wYXRoXG4gICAgICAgICAgICAgICAga2xvZyAnYWN0aXZhdGUnIGluZm8ucGF0aFxuICAgICAgICAgICAgICAgIHd4dyAnbGF1bmNoJyBpbmZvLnBhdGhcbiAgICAgICAgICAgICAgICAjIHd4dyAncmFpc2UnIGluZm8ucGF0aFxuICAgICAgICAgICAgICAgICMgd3h3ICdmb2N1cycgaW5mby5wYXRoXG4gICAgICAgIHdpbj8uaGlkZSgpXG4gICAgZWxzZVxuXG4gICAgICAgIGlmIG5vdCBhY3RpdmVBcHA/XG4gICAgICAgICAgICB3aW4/LmhpZGUoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjaGlsZHAuZXhlYyBcIiN7X19kaXJuYW1lfS8uLi9iaW4vYXBwc3dpdGNoIC1mcCAje2FjdGl2ZUFwcH1cIiwgKGVycikgLT4gd2luPy5oaWRlKClcblxuIzAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiMwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwXG4jMDAwMDAwMDAwICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuIzAwMCAgIDAwMCAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiMwMCAgICAgMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAgICAgIDAwXG5cbnRvZ2dsZVdpbmRvdyA9IC0+XG4gICAgXG4gICAgaWYgd2luPy5pc1Zpc2libGUoKVxuICAgICAgICBpZiBwcmVmcy5nZXQgJ2hpZGVPbkRvdWJsZUFjdGl2YXRpb24nLCBmYWxzZVxuICAgICAgICAgICAgd2luLmhpZGUoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwb3N0LnRvV2lucyAnb3BlbkN1cnJlbnQnXG4gICAgICAgICAgICBhY3RpdmF0ZUFwcCgpIGlmIG5vdCBzbGFzaC53aW4oKVxuICAgIGVsc2VcbiAgICAgICAgaWYgc2xhc2gud2luKClcbiAgICAgICAgICAgIGlmIG5vdCB3aW4/XG4gICAgICAgICAgICAgICAgY3JlYXRlV2luZG93KClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnZXRBY3RpdmVBcHAoKVxuICAgICAgICAgICAgICAgIHdpbi5mb2N1cygpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9zYXNjcmlwdCA9IHJlcXVpcmUoJ29zYXNjcmlwdCcpLmV2YWxcbiAgICAgICAgICAgIG9zYXNjcmlwdCBcIlwiXCJcbiAgICAgICAgICAgICAgICB0ZWxsIGFwcGxpY2F0aW9uIFwiU3lzdGVtIEV2ZW50c1wiXG4gICAgICAgICAgICAgICAgICAgIHNldCBuIHRvIG5hbWUgb2YgZmlyc3QgYXBwbGljYXRpb24gcHJvY2VzcyB3aG9zZSBmcm9udG1vc3QgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIGVuZCB0ZWxsXG4gICAgICAgICAgICAgICAgZG8gc2hlbGwgc2NyaXB0IFwiZWNobyBcIiAmIG5cbiAgICAgICAgICAgICAgICBcIlwiXCIsIHR5cGU6J0FwcGxlU2NyaXB0JywgKGVycixuYW1lKSAtPlxuICAgICAgICAgICAgICAgICAgICBhcHBOYW1lID0gU3RyaW5nKG5hbWUpLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICBpZiBub3Qgd2luP1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlV2luZG93KClcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWN0aXZlQXBwKClcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbi5mb2N1cygpXG5cbnJlbG9hZFdpbmRvdyA9IC0+IHdpbi53ZWJDb250ZW50cy5yZWxvYWRJZ25vcmluZ0NhY2hlKClcblxuIyAgMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4jIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgXG5cbmNyZWF0ZVdpbmRvdyA9IC0+XG5cbiAgICByZXR1cm4gaWYgd2luP1xuXG4gICAgd2luID0gbmV3IEJyb3dzZXJXaW5kb3dcbiAgICAgICAgd2lkdGg6ICAgICAgICAgICAzMDBcbiAgICAgICAgaGVpZ2h0OiAgICAgICAgICAzMDBcbiAgICAgICAgY2VudGVyOiAgICAgICAgICB0cnVlXG4gICAgICAgIGFsd2F5c09uVG9wOiAgICAgdHJ1ZVxuICAgICAgICBtb3ZhYmxlOiAgICAgICAgIHRydWVcbiAgICAgICAgcmVzaXphYmxlOiAgICAgICB0cnVlXG4gICAgICAgIHRyYW5zcGFyZW50OiAgICAgdHJ1ZVxuICAgICAgICBmcmFtZTogICAgICAgICAgIGZhbHNlXG4gICAgICAgIG1heGltaXphYmxlOiAgICAgZmFsc2VcbiAgICAgICAgbWluaW1pemFibGU6ICAgICBmYWxzZVxuICAgICAgICBtaW5XaWR0aDogICAgICAgIDIwMFxuICAgICAgICBtaW5IZWlnaHQ6ICAgICAgIDIwMFxuICAgICAgICBtYXhXaWR0aDogICAgICAgIDYwMFxuICAgICAgICBtYXhIZWlnaHQ6ICAgICAgIDYwMFxuICAgICAgICBmdWxsc2NyZWVuOiAgICAgIGZhbHNlXG4gICAgICAgIHNob3c6ICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgd2ViUHJlZmVyZW5jZXM6XG4gICAgICAgICAgICBub2RlSW50ZWdyYXRpb246IHRydWVcblxuICAgIGJvdW5kcyA9IHByZWZzLmdldCAnYm91bmRzJ1xuICAgIHdpbi5zZXRCb3VuZHMgYm91bmRzIGlmIGJvdW5kcz9cbiAgICB3aW4ubG9hZFVSTCBcImZpbGU6Ly8je19fZGlybmFtZX0vaW5kZXguaHRtbFwiXG4gICAgd2luLm9uICdjbG9zZWQnLCAtPiB3aW4gPSBudWxsXG4gICAgd2luLm9uICdyZXNpemUnLCBvbldpblJlc2l6ZVxuICAgIHdpbi5vbiAnbW92ZScsICAgc2F2ZUJvdW5kc1xuICAgIHdpbi5vbiAncmVhZHktdG8tc2hvdycsIC0+XG4gICAgICAgIGdldEFjdGl2ZUFwcCgpXG4gICAgICAgIGlmIGFyZ3MuZGVidWdcbiAgICAgICAgICAgIHdpbi5zaG93KClcbiAgICAgICAgICAgIHdpbi53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoKVxuICAgIHdpblxuXG5zYXZlQm91bmRzID0gLT4gaWYgd2luPyB0aGVuIHByZWZzLnNldCAnYm91bmRzJywgd2luLmdldEJvdW5kcygpXG5cbnNxdWFyZVRpbWVyID0gbnVsbFxuXG5vbldpblJlc2l6ZSA9IChldmVudCkgLT5cbiAgICBcbiAgICBjbGVhclRpbWVvdXQgc3F1YXJlVGltZXJcbiAgICBhZGp1c3RTaXplID0gLT5cbiAgICAgICAgYiA9IHdpbi5nZXRCb3VuZHMoKVxuICAgICAgICBpZiBiLndpZHRoICE9IGIuaGVpZ2h0XG4gICAgICAgICAgICBiLndpZHRoID0gYi5oZWlnaHQgPSBNYXRoLm1pbiBiLndpZHRoLCBiLmhlaWdodFxuICAgICAgICAgICAgd2luLnNldEJvdW5kcyBiXG4gICAgICAgIHNhdmVCb3VuZHMoKVxuICAgIHNxdWFyZVRpbWVyID0gc2V0VGltZW91dCBhZGp1c3RTaXplLCAzMDBcblxuc2hvd0Fib3V0ID0gLT5cbiAgICBcbiAgICBpZiBwcmVmcy5nZXQoJ3NjaGVtZScsICdicmlnaHQnKSA9PSAnYnJpZ2h0J1xuICAgICAgICBjb2xvciA9ICcjZmZmJ1xuICAgICAgICB0ZXh0YyA9ICcjZGRkJ1xuICAgICAgICBoaWdobCA9ICcjMDAwJ1xuICAgIGVsc2VcbiAgICAgICAgdGV4dGMgPSAnIzQ0NCdcbiAgICAgICAgaGlnaGwgPSAnI2ZmZidcbiAgICAgICAgY29sb3IgPSAnIzExMSdcbiAgICAgICAgXG4gICAgYWJvdXRcbiAgICAgICAgaW1nOiAgICAgICAgXCIje19fZGlybmFtZX0vLi4vaW1nL2Fib3V0LnBuZ1wiXG4gICAgICAgIGNvbG9yOiAgICAgIHRleHRjXG4gICAgICAgIGhpZ2hsaWdodDogIGhpZ2hsXG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yXG4gICAgICAgIHNpemU6ICAgICAgIDIwMFxuICAgICAgICBwa2c6ICAgICAgICBwa2dcblxuYXBwLm9uICd3aW5kb3ctYWxsLWNsb3NlZCcsIChldmVudCkgLT4gZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4jMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgIDAwMFxuIzAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMFxuIzAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAgIDAwMDAwXG4jMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMFxuIzAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAwMDBcblxuYXBwLm9uICdyZWFkeScgLT5cblxuICAgIGlmIGFwcC5yZXF1ZXN0U2luZ2xlSW5zdGFuY2VMb2NrP1xuICAgICAgICBcbiAgICAgICAgaWYgYXBwLnJlcXVlc3RTaW5nbGVJbnN0YW5jZUxvY2soKVxuICAgICAgICAgICAgYXBwLm9uICdzZWNvbmQtaW5zdGFuY2UnIHRvZ2dsZVdpbmRvd1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhcHAuZXhpdCAwXG4gICAgXG4gICAgdHJheSA9IG5ldyBUcmF5IFwiI3tfX2Rpcm5hbWV9Ly4uL2ltZy9tZW51LnBuZ1wiXG4gICAgdHJheS5vbiAnY2xpY2snLCB0b2dnbGVXaW5kb3dcbiAgICBcbiAgICBpZiBvcy5wbGF0Zm9ybSgpICE9ICdkYXJ3aW4nXG4gICAgICAgIHRyYXkuc2V0Q29udGV4dE1lbnUgTWVudS5idWlsZEZyb21UZW1wbGF0ZSBbXG4gICAgICAgICAgICBsYWJlbDogXCJRdWl0XCJcbiAgICAgICAgICAgIGNsaWNrOiAtPiBhcHAuZXhpdCAwOyBwcm9jZXNzLmV4aXQgMFxuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogXCJBYm91dFwiXG4gICAgICAgICAgICBjbGljazogc2hvd0Fib3V0XG4gICAgICAgICxcbiAgICAgICAgICAgIGxhYmVsOiBcIkFjdGl2YXRlXCJcbiAgICAgICAgICAgIGNsaWNrOiB0b2dnbGVXaW5kb3dcbiAgICAgICAgXVxuICAgICAgICBcbiAgICBhcHAuZG9jaz8uaGlkZSgpXG5cbiAgICAjIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwXG5cbiAgICBNZW51LnNldEFwcGxpY2F0aW9uTWVudSBNZW51LmJ1aWxkRnJvbVRlbXBsYXRlIFtcbiAgICAgICAgbGFiZWw6IGFwcC5nZXROYW1lKClcbiAgICAgICAgc3VibWVudTogW1xuICAgICAgICAgICAgbGFiZWw6IFwiQWJvdXQgI3twa2cubmFtZX1cIlxuICAgICAgICAgICAgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrLidcbiAgICAgICAgICAgIGNsaWNrOiAtPiBzaG93QWJvdXQoKVxuICAgICAgICAsXG4gICAgICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJ1xuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogJ1F1aXQnXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtRJ1xuICAgICAgICAgICAgY2xpY2s6IC0+XG4gICAgICAgICAgICAgICAgc2F2ZUJvdW5kcygpXG4gICAgICAgICAgICAgICAgYXBwLmV4aXQgMFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCAwXG4gICAgICAgIF1cbiAgICAsXG4gICAgICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICAgICAjIDAwMCAwIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDBcbiAgICAgICAgIyAwMDAwMDAwMDAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwXG4gICAgICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICAgICAjIDAwICAgICAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMCAgICAgMDBcblxuICAgICAgICBsYWJlbDogJ1dpbmRvdydcbiAgICAgICAgc3VibWVudTogW1xuICAgICAgICAgICAgbGFiZWw6ICAgICAgICdDbG9zZSBXaW5kb3cnXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtXJ1xuICAgICAgICAgICAgY2xpY2s6ICAgICAgIC0+IHdpbj8uY2xvc2UoKVxuICAgICAgICAsXG4gICAgICAgICAgICB0eXBlOiAnc2VwYXJhdG9yJ1xuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogICAgICAgJ1JlbG9hZCBXaW5kb3cnXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ0NtZE9yQ3RybCtBbHQrTCdcbiAgICAgICAgICAgIGNsaWNrOiAgICAgICAtPiByZWxvYWRXaW5kb3coKVxuICAgICAgICAsXG4gICAgICAgICAgICBsYWJlbDogICAgICAgJ1RvZ2dsZSBEZXZUb29scydcbiAgICAgICAgICAgIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0FsdCtJJ1xuICAgICAgICAgICAgY2xpY2s6ICAgICAgIC0+IHdpbj8ud2ViQ29udGVudHMub3BlbkRldlRvb2xzKClcbiAgICAgICAgXVxuICAgIF1cblxuICAgIHByZWZzLmluaXQgc2hvcnRjdXQ6ICdGMSdcblxuICAgIGVsZWN0cm9uLmdsb2JhbFNob3J0Y3V0LnJlZ2lzdGVyIHByZWZzLmdldCgnc2hvcnRjdXQnKSwgdG9nZ2xlV2luZG93XG5cbiAgICBmcy5lbnN1cmVEaXJTeW5jIGljb25EaXJcblxuICAgIHNjciA9IHJlcXVpcmUgJy4vc2NyaXB0cydcbiAgICBpZiBzbGFzaC53aW4oKVxuICAgICAgICBzY3JpcHRzID0gc2NyLndpblNjcmlwdHMoKVxuICAgIGVsc2VcbiAgICAgICAgc2NyaXB0cyA9IHNjci5tYWNTY3JpcHRzKClcbiAgICBcbiAgICBmaW5kQXBwcygpXG4gICAgICAgIFxuICAgICAgICAgICAgIl19
//# sourceURL=../coffee/main.coffee